#BlueJ class context
comment0.target=ManipuladorDeArray
comment0.text=\r\n\ Um\ objeto\ desta\ classe\ \u00E9\ especializado\ em\ realizar\ diversas\ opera\u00E7\u00F5es\ envolvendo\ arrays\ de\ n\u00FAmeros\ inteiros.\r\n
comment1.params=numeros
comment1.target=int\ calculeSoma(int[])
comment1.text=\r\n\ Obt\u00E9m\ a\ soma\ dos\ n\u00FAmeros\ do\ array.\r\n\r\n\ @param\ numeros\ O\ array\ contendo\ os\ n\u00FAmeros.\r\n\ @return\ Retorna\ a\ soma\ dos\ n\u00FAmeros.\ Se\ o\ array\ estiver\ vazio\ retorna\ zero.\r\n
comment10.params=numeros\ fator
comment10.target=void\ multipliquePorFator(int[],\ int)
comment10.text=\r\n\ Multiplica\ cada\ n\u00FAmero\ do\ array\ por\ um\ determinado\ fator.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @param\ fator\ O\ fator.\r\n
comment11.params=numeros\ fator
comment11.target=int[]\ obtenhaMultiplicadoPorFator(int[],\ int)
comment11.text=\r\n\ Obt\u00E9m\ uma\ c\u00F3pia\ do\ array\ contendo\ os\ n\u00FAmeros\ multiplicados\ por\ um\ determinado\ fator.\ Exemplo\:\r\n\ se\ o\ array\ for\ [8,3,1]\ e\ o\ fator\ for\ 3\ ent\u00E3o\ retorna\ o\ novo\ array\ [24,9,3].\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @param\ fator\ O\ fator.\r\n\ @return\ Retorna\ um\ array\ contendo\ os\ n\u00FAmeros\ multiplicados\ pelo\ fator.\r\n
comment12.params=numeros\ n
comment12.target=int[]\ copieNPrimeiros(int[],\ int)
comment12.text=\r\n\ Obt\u00E9m\ uma\ c\u00F3pia\ dos\ n\ primeiros\ n\u00FAmeros\ do\ array.\ Se\ n\ for\ maior\ que\ a\ quantidade\r\n\ de\ n\u00FAmeros\ do\ array\ ent\u00E3o\ obt\u00E9m\ uma\ c\u00F3pia\ de\ todos\ os\ n\u00FAmeros\ do\ array.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @param\ n\ A\ quantidade\ de\ n\u00FAmeros\ a\ serem\ copiados.\r\n\ @return\ Retorna\ a\ c\u00F3pia\ dos\ n\ primeiros\ n\u00FAmeros.\r\n
comment13.params=numeros
comment13.target=int[]\ obtenhaCopia(int[])
comment13.text=\r\n\ Obt\u00E9m\ uma\ c\u00F3pia\ dos\ n\u00FAmeros\ do\ array.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros\r\n\ @return\ Retorna\ uma\ c\u00F3pia\ dos\ n\u00FAmeros.\r\n
comment14.params=numeros\ limiteInferior\ limiteSuperior
comment14.target=int[]\ obtenhaNumerosNoIntervalo(int[],\ int,\ int)
comment14.text=\r\n\ Obt\u00E9m\ todos\ os\ n\u00FAmeros\ do\ array\ que\ est\u00E3o\ dentro\ de\ um\ intervalo.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @param\ limiteInferior\ O\ limite\ inferior\ do\ intervalo.\r\n\ @param\ limiteSuperior\ O\ limite\ superior\ do\ intervalo.\r\n\ @return\ Retorna\ os\ n\u00FAmeros\ que\ est\u00E3o\ no\ intervalo.\r\n
comment15.params=a1\ a2
comment15.target=int[]\ unaArrays(int[],\ int[])
comment15.text=\r\n\ Une\ dois\ arrays.\ Exemplo\:\ se\ os\ arrays\ forem\ [5,2]\ e\ [9,1,2]\ ent\u00E3o\ o\ m\u00E9todo\ retorna\ [5,2,9,1,2].\r\n\r\n\ @param\ a1\ O\ primeiro\ array.\r\n\ @param\ a2\ O\ segundo\ array.\r\n\ @return\ Retorna\ um\ array\ contendo\ os\ n\u00FAmeros\ dos\ arrays\ a1\ e\ a2.\r\n
comment16.params=numeros
comment16.target=int[]\ obtenhaPares(int[])
comment16.text=\r\n\ Obt\u00E9m\ os\ n\u00FAmeros\ pares\ contidos\ no\ array.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @return\ Retorna\ os\ n\u00FAmeros\ pares\ existentes\ no\ array\ numeros.\r\n
comment17.params=numeros
comment17.target=int[]\ dupliqueArray(int[])
comment17.text=\r\n\ Obt\u00E9m\ um\ array\ contendo\ duas\ ocorr\u00EAncias\ de\ cada\ n\u00FAmero.\ Exemplo\:\ se\ o\ array\ for\ formado\ pelos\r\n\ n\u00FAmeros\ [7,2,6]\ ent\u00E3o\ o\ m\u00E9todo\ retorna\ o\ array\ [7,7,2,2,6,6].\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @return\ Retorna\ o\ array\ contendo\ duas\ ocorr\u00EAncias\ de\ cada\ n\u00FAmero\ existente\ em\ numeros.\r\n
comment18.params=numeros
comment18.target=boolean\ possuiNumeroPar(int[])
comment18.text=\r\n\ Verifica\ se\ o\ array\ possui\ pelo\ menos\ um\ n\u00FAmero\ par.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @return\ Retorna\ true\ se\ o\ array\ possui\ pelo\ menos\ um\ n\u00FAmero\ par\ ou\ false\ caso\ contr\u00E1rio.\r\n
comment19.params=numeros\ n
comment19.target=int\ obtenhaPrimeiraPosicaoDeNumero(int[],\ int)
comment19.text=\r\n\ Obt\u00E9m\ a\ posi\u00E7\u00E3o\ da\ primeira\ ocorr\u00EAncia\ de\ um\ n\u00FAmero\ dentro\ de\ um\ array.\ Se\ o\ n\u00FAmero\ n\u00E3o\ estiver\ no\r\n\ array\ ent\u00E3o\ o\ m\u00E9todo\ retorna\ a\ posi\u00E7\u00E3o\ -1.\ Exemplo\:\ se\ o\ array\ for\ [7,3,2,3,8]\ e\ o\ n\u00FAmero\ for\ 3\ ent\u00E3o\r\n\ o\ m\u00E9todo\ retorna\ 1.\ Se\ o\ n\u00FAmero\ for\ 4\ ent\u00E3o\ o\ m\u00E9todo\ retorna\ -1.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @param\ n\ Um\ n\u00FAmero.\r\n\ @return\ Retorna\ a\ posi\u00E7\u00E3o\ da\ primeira\ ocorr\u00EAncia\ do\ n\u00FAmero\ n\ no\ array\ numeros.\r\n
comment2.params=numeros
comment2.target=int[]\ encontreEmPosicoesImpares(int[])
comment2.text=\r\n\ Obt\u00E9m\ os\ n\u00FAmeros\ que\ est\u00E3o\ em\ posi\u00E7\u00F5es\ \u00EDmpares,\ ou\ seja,\ retorna\ os\ n\u00FAmeros\ das\ posi\u00E7\u00F5es\ 1,\ 3,\ 5,\ etc.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @return\ Retorna\ os\ n\u00FAmeros\ que\ est\u00E3o\ em\ posi\u00E7\u00F5es\ \u00EDmpares.\r\n
comment20.params=numeros\ n
comment20.target=int[]\ obtenhaPosicoesDeNumero(int[],\ int)
comment20.text=\r\n\ Obt\u00E9m\ as\ posi\u00E7\u00F5es\ em\ que\ um\ n\u00FAmero\ aparece\ dentro\ de\ um\ array.\ Exemplo\:\ para\ o\ array\ [9,12,6,9]\ o\ n\u00FAmero\ 9\ aparece\ nas\ posi\u00E7\u00F5es\ 0\ e\ 3.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @param\ n\ O\ n\u00FAmero.\r\n\ @return\ As\ posi\u00E7\u00F5es\ de\ n\ no\ array\ numeros.\r\n
comment21.params=numeros
comment21.target=boolean\ semRepeticoes(int[])
comment21.text=\r\n\ Verifica\ se\ o\ array\ n\u00E3o\ possui\ n\u00FAmeros\ repetidos.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @return\ Retorna\ true\ se\ o\ array\ numeros\ n\u00E3o\ possui\ n\u00FAmeros\ repetidos\ ou\ false\ caso\ contr\u00E1rio.\r\n
comment22.params=numeros\ n
comment22.target=int[]\ obtenhaSemOcorrencias(int[],\ int)
comment22.text=\r\n\ Obt\u00E9m\ um\ array\ sem\ ocorr\u00EAncias\ de\ um\ determinado\ n\u00FAmero.\ Exemplo\:\ se\ o\ array\ for\ [8,2,3,2]\ e\ o\ n\u00FAmero\ for\ 2\ ent\u00E3o\ retorna\ [8,3].\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @param\ n\ Um\ n\u00FAmero.\r\n\ @return\ Retorna\ um\ array\ onde\ n\ foi\ removido\ do\ array\ numeros.\r\n
comment23.params=numeros\ numero\ substituto
comment23.target=void\ substituaTodasOcorrencias(int[],\ int,\ int)
comment23.text=\r\n\ Substitui\ todas\ as\ ocorr\u00EAncias\ de\ um\ n\u00FAmero\ por\ outro\ n\u00FAmero.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @param\ numero\ O\ n\u00FAmero\ a\ ser\ substitu\u00EDdo.\r\n\ @param\ substituto\ O\ n\u00FAmero\ que\ ficar\u00E1\ no\ lugar\ do\ numero.\r\n
comment24.params=numeros\ numero\ substituto
comment24.target=void\ substituaPrimeiraOcorrencia(int[],\ int,\ int)
comment24.text=\r\n\ Substitui\ a\ primeira\ ocorr\u00EAncia\ de\ um\ n\u00FAmero\ por\ outro\ n\u00FAmero.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @param\ numero\ O\ n\u00FAmero\ a\ ser\ substitu\u00EDdo.\r\n\ @param\ substituto\ O\ n\u00FAmero\ que\ ficar\u00E1\ no\ lugar\ do\ numero.\r\n
comment25.params=numeros\ numero\ substituto
comment25.target=void\ substituaUltimaOcorrencia(int[],\ int,\ int)
comment25.text=\r\n\ Substitui\ a\ \u00FAltima\ ocorr\u00EAncia\ de\ um\ n\u00FAmero\ por\ outro\ n\u00FAmero.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @param\ numero\ O\ n\u00FAmero\ a\ ser\ substitu\u00EDdo.\r\n\ @param\ substituto\ O\ n\u00FAmero\ que\ ficar\u00E1\ no\ lugar\ do\ numero.\r\n
comment26.params=numeros
comment26.target=int[]\ inverta(int[])
comment26.text=\r\n\ Obt\u00E9m\ o\ array\ invertido.\ Exemplo\:\ se\ o\ array\ for\ {7,4,5,1}\ ent\u00E3o\ o\ array\ invertido\ \u00E9\ {1,5,4,7}\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @return\ Retorna\ um\ novo\ array\ numeros\ invertido.\r\n
comment27.params=numeros
comment27.target=int[]\ retorneSomaPosicoesParesPosicoesImpares(int[])
comment27.text=\r\n\ Calcula\ a\ soma\ dos\ n\u00FAmeros\ em\ posi\u00E7\u00F5es\ pares\ e\ dos\ n\u00FAmeros\ em\ posi\u00E7\u00F5es\ \u00EDmpares.\r\n\ Considera\ que\ o\ array\ sempre\ tem\ pelo\ menos\ dois\ numeros.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @return\ Retorna\ array\ de\ tamanho\ 2\ onde\ o\ primeiro\ n\u00FAmero\ \u00E9\ a\ soma\ dos\ n\u00FAmeros\ em\ posi\u00E7\u00F5es\ pares\ e\ o\ segundo\ n\u00FAmero\ \u00E9\ a\ soma\ dos\ n\u00FAmeros\ em\ posi\u00E7\u00F5es\ \u00EDmpares.\r\n
comment28.params=numeros\ posicoes
comment28.target=int[]\ obtenhaDasPosicoes(int[],\ int[])
comment28.text=\r\n\ Obt\u00E9m\ os\ n\u00FAmeros\ que\ est\u00E3o\ em\ algumas\ posi\u00E7\u00F5es.\ Considera\ que\ as\ posi\u00E7oes\ sempre\r\n\ sao\ validas.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @param\ posicoes\ As\ posi\u00E7\u00F5es.\r\n\ @return\ Retorna\ os\ n\u00FAmeros\ que\ est\u00E3o\ nas\ posi\u00E7\u00F5es\ indicadas\ em\ posicoes.\r\n
comment29.params=numeros\ qtd\ pos
comment29.target=int[]\ obtenhaParte(int[],\ int,\ int)
comment29.text=\r\n\ Obt\u00E9m\ uma\ parte\ de\ um\ array.\ Deve-se\ indicar\ a\ quantidade\ de\ n\u00FAmeros\ desejados\ e\ a\ posi\u00E7\u00E3o\ onde\ a\ c\u00F3pia\ deve\ iniciar.\r\n\ Se\ a\ posi\u00E7\u00E3o\ for\ maior\ ou\ igual\ ao\ tamanho\ do\ array\ ent\u00E3o\ retorna\ um\ array\ vazio.\ Se\ a\ quantidade\ de\ n\u00FAmeros\ desejada\r\n\ for\ maior\ que\ a\ quantidade\ de\ n\u00FAmeros\ existentes\ ent\u00E3o\ retorna\ os\ n\u00FAmeros\ poss\u00EDveis.\ Exemplo\:\ considere\ o\ array\ {6,3,4,1,2}.\r\n\ Se\ a\ quantidade\ for\ 2\ e\ a\ posi\u00E7\u00E3o\ for\ 1\ ent\u00E3o\ retorna\ {3,4}.\ Se\ a\ quantidade\ for\ 3\ e\ a\ posi\u00E7\u00E3o\ for\ 4\ ent\u00E3o\ retorna\ {2}.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @param\ qtd\ A\ quantidade\ de\ n\u00FAmeros\ desejados.\r\n\ @param\ pos\ A\ posi\u00E7\u00E3o\ inicial\ da\ parte\ a\ ser\ copiada.\r\n\ @return\ Retorna\ a\ parte\ do\ array\ copiada.\r\n
comment3.params=numeros
comment3.target=int[]\ obtenhaPrimeiroEUltimo(int[])
comment3.text=\r\n\ Obt\u00E9m\ o\ primeiro\ e\ o\ \u00FAltimo\ n\u00FAmero\ do\ array.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @return\ Retorna\ um\ array\ de\ tamanho\ 2\ onde\ o\ primeiro\ n\u00FAmero\ \u00E9\ o\ primeiro\ n\u00FAmero\ do\ array\ numeros\ e\ o\ segundo\ n\u00FAmero\ \u00E9\r\n\ o\ \u00FAltimo\ n\u00FAmero\ do\ array\ numeros.\ Caso\ o\ array\ tenha\ menos\ de\ dois\ n\u00FAmeros\ ent\u00E3o\ retorna\ um\ array\ de\ tamanho\ zero.\r\n
comment4.params=numeros\ numero
comment4.target=int\ conteQuantasOcorrencias(int[],\ int)
comment4.text=\r\n\ Conta\ quantas\ vezes\ um\ n\u00FAmero\ aparece\ em\ um\ array.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @param\ numero\ O\ n\u00FAmero.\r\n\ @return\ Retorna\ quantas\ vezes\ o\ numero\ aparece\ no\ array\ numeros.\r\n
comment5.params=numeros
comment5.target=int\ obtenhaMaiorNumero(int[])
comment5.text=\r\n\ Obt\u00E9m\ o\ maior\ n\u00FAmero\ do\ array.\ Considere\ que\ o\ array\ sempre\ possui\ pelo\ menos\ um\ n\u00FAmero.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @return\ Retorna\ o\ maior\ n\u00FAmero\ do\ array\ numeros.\r\n
comment6.params=numeros
comment6.target=int\ obtenhaPosicaoDoMaiorNumero(int[])
comment6.text=\r\n\ Obt\u00E9m\ a\ posi\u00E7\u00E3o\ do\ maior\ n\u00FAmero\ no\ array.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @return\ Retorna\ \ a\ posi\u00E7\u00E3o\ do\ maior\ n\u00FAmero\ no\ array\ numeros.\ Se\ o\ array\ tiver\ tamanho\ zero\r\n\ ent\u00E3o\ retorna\ -1.\r\n
comment7.params=numeros\ limite
comment7.target=int\ conteQuantidadeAcimaDeLimite(int[],\ int)
comment7.text=\r\n\ Conta\ quantos\ n\u00FAmeros\ no\ array\ s\u00E3o\ maiores\ que\ um\ n\u00FAmero\ limite.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @param\ limite\ O\ limite.\r\n\ @return\ Retorna\ a\ quantidade\ de\ n\u00FAmeros\ acima\ de\ limite.\r\n
comment8.params=numeros
comment8.target=float\ calculeMedia(int[])
comment8.text=\r\n\ Calcula\ a\ m\u00E9dia\ simples\ dos\ n\u00FAmeros.\ Considere\ que\ o\ array\ sempre\ tem\ pelo\ menos\ um\ n\u00FAmero.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @return\ Retorna\ a\ m\u00E9dia\ dos\ n\u00FAmeros.\r\n
comment9.params=numeros\ limiteInferior\ limiteSuperior
comment9.target=int\ retorneQuantosNoIntervalo(int[],\ int,\ int)
comment9.text=\r\n\ Calcula\ quantos\ n\u00FAmeros\ est\u00E3o\ dentro\ de\ um\ intervalo.\ Exemplo\:\ se\ o\ intervalo\ for\ [10,40]\ ent\u00E3o\ estar\u00E3o\ no\ intervalo\r\n\ os\ n\u00FAmeros\ que\ forem\ maiores\ ou\ iguais\ a\ 10\ e\ menores\ ou\ iguais\ a\ 40.\r\n\r\n\ @param\ numeros\ Os\ n\u00FAmeros.\r\n\ @param\ limiteInferior\ O\ limite\ inferior\ do\ intervalo.\r\n\ @param\ limiteSuperior\ O\ limite\ superior\ do\ intervalo.\r\n\ @return\ Retorna\ a\ quantidade\ de\ n\u00FAmeros\ dentro\ do\ intervalo.\r\n
numComments=30
